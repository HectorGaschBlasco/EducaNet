---
import Layout from "../layouts/Layout.astro";
import Student_SignIn from "../components/StudentSignIn.astro";
import Student_SignUp from "../components/StudentSignUp.astro";
import Student_Form from "../components/StudentForm.astro";
import Teacher_Form from "../components/TeacherForm.astro";
import Teacher_SignIn from "../components/TeacherSignIn.astro";
import Teacher_SignUp from "../components/TeacherSignUp.astro";

import { isVaildDni } from "../utils/isVaildDni";
import { isValidPassword } from "../utils/isValidPassword";
import { hashPassword } from "../utils/hashPassword";
import { checkEmail } from "../utils/checkEmail";
import { checkPassword } from "../utils/checkPassword";

import { v4 as uuidv4 } from "uuid";
import { db, like, Student, Teacher } from "astro:db";

await fetch("http://localhost:4321/api/Student_SignUp_Form_error.json", {
  method: "POST",
  headers: { "Content-Type": "application/json" },
  body: JSON.stringify({
    location: null,
  }),
});

await fetch("http://localhost:4321/api/Student_SignIn_Form_error.json", {
  method: "POST",
  headers: { "Content-Type": "application/json" },
  body: JSON.stringify({
    location: null,
  }),
});

if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    if (
      data.get("Student-SignUp-name") != null &&
      data.get("Student-SignUp-email") != null &&
      data.get("Student-SignUp-nia") != null &&
      data.get("Student-SignUp-dni") != null &&
      data.get("Student-SignUp-password") != null &&
      data.get("Student-SignUp-rpassword") != null
    ) {
      const Student_SignUp_uuid = uuidv4();
      const Student_SignUp_name = data.get("Student-SignUp-name");
      const Student_SignUp_email = data.get("Student-SignUp-email");
      const Student_SignUp_nia = data.get("Student-SignUp-nia");
      const Student_SignUp_dni = data.get("Student-SignUp-dni");
      const Student_SignUp_password = data.get("Student-SignUp-password");
      const Student_SignUp_rpassword = data.get("Student-SignUp-rpassword");

      if (
        typeof Student_SignUp_name === "string" &&
        typeof Student_SignUp_email === "string" &&
        typeof Student_SignUp_nia === "string" &&
        typeof Student_SignUp_dni === "string" &&
        typeof Student_SignUp_password === "string" &&
        typeof Student_SignUp_rpassword === "string"
      ) {
        if (isVaildDni(Student_SignUp_dni)) {
          if (
            isValidPassword(Student_SignUp_password, Student_SignUp_rpassword)
          ) {
            const SignUp_hashed_password = await hashPassword(
              Student_SignUp_password
            );
            const students_like_name = await db
              .select({
                name: Student.name,
              })
              .from(Student)
              .where(like(Student.name, Student_SignUp_name));

            const students_like_email = await db
              .select({
                email: Student.email,
              })
              .from(Student)
              .where(like(Student.email, Student_SignUp_email));

            const students_like_nia = await db
              .select({
                nia: Student.nia,
              })
              .from(Student)
              .where(like(Student.nia, Student_SignUp_nia));

            const students_like_dni = await db
              .select({
                dni: Student.dni,
              })
              .from(Student)
              .where(like(Student.dni, Student_SignUp_dni));

            if (students_like_name[0] == null) {
              if (students_like_email[0] == null) {
                if (students_like_nia[0] == null) {
                  if (students_like_dni[0] == null) {
                    await db.insert(Student).values({
                      id: Student_SignUp_uuid,
                      name: Student_SignUp_name,
                      email: Student_SignUp_email,
                      nia: Student_SignUp_nia,
                      dni: Student_SignUp_dni,
                      password: SignUp_hashed_password,
                    });
                    await fetch(
                      "http://localhost:4321/api/Student_SignUp_Form_error.json",
                      {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({
                          location: "NO_ERROR",
                        }),
                      }
                    );
                  } else {
                    await fetch(
                      "http://localhost:4321/api/Student_SignUp_Form_error.json",
                      {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({
                          location: "DNI",
                        }),
                      }
                    );
                  }
                } else {
                  await fetch(
                    "http://localhost:4321/api/Student_SignUp_Form_error.json",
                    {
                      method: "POST",
                      headers: { "Content-Type": "application/json" },
                      body: JSON.stringify({
                        location: "NIA",
                      }),
                    }
                  );
                }
              } else {
                await fetch(
                  "http://localhost:4321/api/Student_SignUp_Form_error.json",
                  {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                      location: "Email",
                    }),
                  }
                );
              }
            } else {
              await fetch(
                "http://localhost:4321/api/Student_SignUp_Form_error.json",
                {
                  method: "POST",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify({
                    location: "Name",
                  }),
                }
              );
            }
          } else {
            await fetch(
              "http://localhost:4321/api/Student_SignUp_Form_error.json",
              {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                  location: "Passwords_not_match",
                }),
              }
            );
          }
        } else {
          await fetch(
            "http://localhost:4321/api/Student_SignUp_Form_error.json",
            {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({
                location: "Not_DNI_correct",
              }),
            }
          );
        }
      }
    }
    if (
      data.get("Student-SignIn-email") != null &&
      data.get("Student-SignIn-password") != null
    ) {
      const Student_SignIn_email = data.get("Student-SignIn-email");
      const Student_SignIn_password = data.get("Student-SignIn-password");

      if (
        typeof Student_SignIn_email === "string" &&
        typeof Student_SignIn_password === "string"
      ) {
        const students = await db
          .select()
          .from(Student)
          .where(like(Student.email, Student_SignIn_email));
        if (students.length > 0 && students.length < 2) {
          if (await checkEmail(Student_SignIn_email, students[0].email)) {
            if (
              await checkPassword(Student_SignIn_password, students[0].password)
            ) {
              Astro.cookies.set("Student_email", students[0].email);
              await fetch(
                "http://localhost:4321/api/Student_SignIn_Form_error.json",
                {
                  method: "POST",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify({
                    location: "NO_ERROR",
                  }),
                }
              );
            } else {
              await fetch(
                "http://localhost:4321/api/Student_SignIn_Form_error.json",
                {
                  method: "POST",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify({
                    location: "Password",
                  }),
                }
              );
            }
          } else {
            await fetch(
              "http://localhost:4321/api/Student_SignIn_Form_error.json",
              {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                  location: "Email",
                }),
              }
            );
          }
        } else {
          await fetch(
            "http://localhost:4321/api/Student_SignIn_Form_error.json",
            {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({
                location: "Email",
              }),
            }
          );
        }
      }
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}
---

<Layout title="Welcome to EducaNet.">
  <header
    class="w-[800px] max-w-[calc(100%_-_2rem)] text-[white] text-xl leading-[1.6] m-auto p-4;"
  >
    <h1 class="text-gradient text-7xl font-bold text-center mt-14 mb-24">
      Welcome to EducaNet
    </h1>
  </header>
  <main
    class="flex w-[1000px] max-w-[calc(100%_-_2rem)] text-[white] text-xl items-center leading-[1.6] m-auto p-4;"
    id="main"
  >
    <Teacher_Form />
    <Student_Form />
  </main>
  <main
    class="w-[800px] max-w-[calc(100%_-_2rem)] text-[white] text-xl leading-[1.6] m-auto p-4;"
  >
    <Student_SignIn />
    <Student_SignUp />
    <Teacher_SignIn />
    <Teacher_SignUp />
  </main>
</Layout>

<script>
  import Swal from "sweetalert2";

  const request_SignUp = new XMLHttpRequest();
  const request_SignIn = new XMLHttpRequest();
  request_SignUp.open(
    "GET",
    "http://localhost:4321/api/Student_SignUp_Form_error.json"
  );
  request_SignUp.setRequestHeader("Content-Type", "application/json");
  request_SignUp.send();
  request_SignUp.responseType = "json";
  request_SignUp.onload = () => {
    if (request_SignUp.readyState == 4 && request_SignUp.status == 200) {
      const err = request_SignUp.response;
      if (err.location == "NO_ERROR") {
        Swal.fire({
          title: "Successful!",
          text: "The sign up was completly successful",
          icon: "success",
          showConfirmButton: false,
          position: "bottom",
          toast: true,
          timer: 5000,
          timerProgressBar: true,
          didOpen: (toast) => {
            toast.onmouseenter = Swal.stopTimer;
            toast.onmouseleave = Swal.resumeTimer;
          },
          color: "white",
          iconColor: "springgreen",
          background: "rgb(99 102 241)",
        });
      } else if (err.location == "Passwords_not_match") {
        Swal.fire({
          title: "Error!",
          text: "The written passwords doesn't match",
          icon: "error",
          showConfirmButton: false,
          position: "bottom",
          toast: true,
          timer: 5000,
          timerProgressBar: true,
          didOpen: (toast) => {
            toast.onmouseenter = Swal.stopTimer;
            toast.onmouseleave = Swal.resumeTimer;
          },
          color: "white",
          iconColor: "lightcoral",
          background: "rgb(99 102 241)",
          grow: "row",
        });
      } else if (err.location == "Not_DNI_correct") {
        Swal.fire({
          title: "Error!",
          text: "The DNI entered is not correct",
          icon: "error",
          showConfirmButton: false,
          position: "bottom",
          toast: true,
          timer: 5000,
          timerProgressBar: true,
          didOpen: (toast) => {
            toast.onmouseenter = Swal.stopTimer;
            toast.onmouseleave = Swal.resumeTimer;
          },
          color: "white",
          iconColor: "lightcoral",
          background: "rgb(99 102 241)",
          grow: "row",
        });
      } else if (err.location != null) {
        Swal.fire({
          title: "Error!",
          text: "There is already a user with that " + err.location,
          icon: "error",
          showConfirmButton: false,
          position: "bottom",
          toast: true,
          timer: 5000,
          timerProgressBar: true,
          didOpen: (toast) => {
            toast.onmouseenter = Swal.stopTimer;
            toast.onmouseleave = Swal.resumeTimer;
          },
          color: "white",
          iconColor: "lightcoral",
          background: "rgb(99 102 241)",
          grow: "row",
        });
      }
    } else {
      console.log(`Error: ${request_SignUp.status}`);
    }
  };

  request_SignIn.open(
    "GET",
    "http://localhost:4321/api/Student_SignIn_Form_error.json"
  );
  request_SignIn.setRequestHeader("Content-Type", "application/json");
  request_SignIn.send();
  request_SignIn.responseType = "json";
  request_SignIn.onload = () => {
    if (request_SignIn.readyState == 4 && request_SignIn.status == 200) {
      const err = request_SignIn.response;
      if (err.location == "NO_ERROR") {
        Swal.fire({
          title: "Successful!",
          text: "The sign up was completly successful",
          icon: "success",
          showConfirmButton: false,
          position: "bottom",
          timer: 3000,
          timerProgressBar: true,
          color: "white",
          iconColor: "springgreen",
          allowOutsideClick: false,
          background: "rgb(99 102 241)",
        });
        setTimeout(function () {
          window.location.replace("/home");
        }, 3000);
      } else if (err.location == "Email") {
        Swal.fire({
          title: "Error!",
          text: "There is no user with that email",
          icon: "error",
          showConfirmButton: false,
          position: "bottom",
          toast: true,
          timer: 5000,
          timerProgressBar: true,
          didOpen: (toast) => {
            toast.onmouseenter = Swal.stopTimer;
            toast.onmouseleave = Swal.resumeTimer;
          },
          color: "white",
          iconColor: "lightcoral",
          background: "rgb(99 102 241)",
          grow: "row",
        });
      } else if (err.location == "Password") {
        Swal.fire({
          title: "Error!",
          text: "Incorrect password",
          icon: "error",
          showConfirmButton: false,
          position: "bottom",
          toast: true,
          timer: 5000,
          timerProgressBar: true,
          didOpen: (toast) => {
            toast.onmouseenter = Swal.stopTimer;
            toast.onmouseleave = Swal.resumeTimer;
          },
          color: "white",
          iconColor: "lightcoral",
          background: "rgb(99 102 241)",
          grow: "row",
        });
      }
    } else {
      console.log(`Error: ${request_SignUp.status}`);
    }
  };
  //   }
  // });
</script>

<style>
  :root {
    --accent: 136, 58, 234;
    --accent-light: 224, 204, 250;
    --accent-dark: 49, 10, 101;
    --accent-gradient: linear-gradient(
      45deg,
      rgb(var(--accent)),
      rgb(var(--accent-light)) 20%,
      white 60%
    );
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 300%;
  }
</style>
