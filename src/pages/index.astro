---
import Layout from "../layouts/Layout.astro";
import Student_SignIn from "../components/StudentSignIn.astro";
import Student_SignUp from "../components/StudentSignUp.astro";
import Student_Form from "../components/StudentForm.astro";
import Teacher_Form from "../components/TeacherForm.astro";
import Teacher_SignIn from "../components/TeacherSignIn.astro";
import Teacher_SignUp from "../components/TeacherSignUp.astro";

import { isVaildDni } from "../utils/isVaildDni";
import { isValidPassword } from "../utils/isValidPassword";
import { hashPassword } from "../utils/hashPassword";
import { checkEmail } from "../utils/checkEmail";
import { checkPassword } from "../utils/checkPassword";

import { v4 as uuidv4 } from "uuid";
import { db, like, Student, Teacher } from "astro:db";

if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    if (
      data.get("Student-SignUp-name") != null &&
      data.get("Student-SignUp-email") != null &&
      data.get("Student-SignUp-nia") != null &&
      data.get("Student-SignUp-dni") != null &&
      data.get("Student-SignUp-password") != null &&
      data.get("Student-SignUp-rpassword") != null
    ) {
      const Student_SignUp_uuid = uuidv4();
      const Student_SignUp_name = data.get("Student-SignUp-name");
      const Student_SignUp_email = data.get("Student-SignUp-email");
      const Student_SignUp_nia = data.get("Student-SignUp-nia");
      const Student_SignUp_dni = data.get("Student-SignUp-dni");
      const Student_SignUp_password = data.get("Student-SignUp-password");
      const Student_SignUp_rpassword = data.get("Student-SignUp-rpassword");

      if (
        typeof Student_SignUp_name === "string" &&
        typeof Student_SignUp_email === "string" &&
        typeof Student_SignUp_nia === "string" &&
        typeof Student_SignUp_dni === "string" &&
        typeof Student_SignUp_password === "string" &&
        typeof Student_SignUp_rpassword === "string"
      ) {
        if (
          isVaildDni(Student_SignUp_dni) &&
          isValidPassword(Student_SignUp_password, Student_SignUp_rpassword)
        ) {
          const SignUp_hashed_password = await hashPassword(
            Student_SignUp_password
          );
          await db.insert(Student).values({
            id: Student_SignUp_uuid,
            name: Student_SignUp_name,
            email: Student_SignUp_email,
            nia: Student_SignUp_nia,
            dni: Student_SignUp_dni,
            password: SignUp_hashed_password,
          });
        }
      }
    }
    if (
      data.get("Student-SignIn-email") != null &&
      data.get("Student-SignIn-password") != null
    ) {
      const Student_SignIn_email = data.get("Student-SignIn-email");
      const Student_SignIn_password = data.get("Student-SignIn-password");

      if (
        typeof Student_SignIn_email === "string" &&
        typeof Student_SignIn_password === "string"
      ) {
        const students = await db
          .select()
          .from(Student)
          .where(like(Student.email, Student_SignIn_email));
        if (students.length > 0 && students.length < 2) {
          if (
            (await checkEmail(Student_SignIn_email, students[0].email)) &&
            (await checkPassword(Student_SignIn_password, students[0].password))
          ) {
            Astro.cookies.set("Student_email", students[0].email);
            return Astro.redirect("/home");
          }
        }
      }
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}
---

<Layout title="Welcome to EducaNet.">
  <header
    class="w-[800px] max-w-[calc(100%_-_2rem)] text-[white] text-xl leading-[1.6] m-auto p-4;"
  >
    <h1 class="text-gradient text-7xl font-bold text-center mt-14 mb-24">
      Welcome to EducaNet
    </h1>
  </header>
  <main
    class="flex w-[1000px] max-w-[calc(100%_-_2rem)] text-[white] text-xl items-center leading-[1.6] m-auto p-4;"
    id="main"
  >
    <Teacher_Form />
    <Student_Form />
  </main>
  <main
    class="w-[800px] max-w-[calc(100%_-_2rem)] text-[white] text-xl leading-[1.6] m-auto p-4;"
  >
    <Student_SignIn />
    <Student_SignUp />
    <Teacher_SignIn />
    <Teacher_SignUp />
  </main>
</Layout>

<style>
  :root {
    --accent: 136, 58, 234;
    --accent-light: 224, 204, 250;
    --accent-dark: 49, 10, 101;
    --accent-gradient: linear-gradient(
      45deg,
      rgb(var(--accent)),
      rgb(var(--accent-light)) 20%,
      white 60%
    );
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 300%;
  }
</style>
